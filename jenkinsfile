pipeline {
    agent any

    environment {
        AWS_REGION = "ap-south-1"
        AWS_ACCOUNT_ID = "248189928204"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/DikshanshuC/packer-ami-pipeline.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    echo "Installing dependencies..."
                    sudo apt-get update -y
                    sudo apt-get install -y unzip curl
                    
                    curl -LO "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
                    unzip -o awscli-exe-linux_x86_64.zip
                    sudo ./aws/install --update

                    curl -LO "https://releases.hashicorp.com/packer/1.9.2/packer_1.9.2_linux_amd64.zip"
                    unzip -o packer_1.9.2_linux_amd64.zip
                    sudo mv packer /usr/local/bin/packer
                    packer --version
                '''
            }
        }

        stage('Validate AWS Credentials') {
            steps {
                script {
                    def awsIdentity = sh(script: 'aws sts get-caller-identity', returnStdout: true).trim()
                    if (!awsIdentity) {
                        error "AWS credentials not configured properly!"
                    }
                    echo "AWS Credentials Verified: ${awsIdentity}"
                }
            }
        }

        stage('Build AMI with Packer') {
            steps {
                script {
                    sh '''
                        if [ ! -f packer.pkr.hcl ]; then
                            echo "Error: packer.pkr.hcl not found!";
                            exit 1;
                        fi
                    '''

                    sh 'packer init packer.pkr.hcl'

                    sh '''
                        PACKER_LOG=1 PACKER_LOG_PATH=packer_debug.log \
                        packer build -machine-readable \
                        -var "aws_region=${AWS_REGION}" \
                        packer.pkr.hcl | tee output.log
                    '''

                    def packerOutput = readFile('output.log')
                    def amiIdMatch = packerOutput.find(/ami-[0-9A-Za-z]+/)

                    if (amiIdMatch) {
                        env.NEW_AMI_ID = amiIdMatch
                        echo "New AMI ID: ${env.NEW_AMI_ID}"
                    } else {
                        error "AMI ID not found in Packer output! Check packer_debug.log"
                    }
                }
            }
        }

        stage('Find and Deregister Old AMI') {
            steps {
                script {
                    def oldAmiId = sh(script: '''
                        aws ec2 describe-images --owners self \
                        --filters "Name=name,Values=ubuntu-golden-image" \
                        --query "Images | sort_by(@, &CreationDate)[0].ImageId" \
                        --output text
                    ''', returnStdout: true).trim()

                    if (oldAmiId && oldAmiId != "None") {
                        echo "Old AMI ID: ${oldAmiId}"
                        sh "aws ec2 deregister-image --image-id ${oldAmiId}"
                        
                        def snapshotId = sh(script: '''
                            aws ec2 describe-images --image-ids ${oldAmiId} \
                            --query "Images[0].BlockDeviceMappings[0].Ebs.SnapshotId" \
                            --output text
                        ''', returnStdout: true).trim()

                        if (snapshotId && snapshotId != "None") {
                            echo "Deleting Snapshot: ${snapshotId}"
                            sh "aws ec2 delete-snapshot --snapshot-id ${snapshotId}"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ AMI creation and cleanup completed successfully!"
        }
        failure {
            echo "❌ Pipeline failed! Check packer_debug.log and output.log for details."
        }
    }
}
